{
    "// Example:\r\n// 0. Setup.\r\n// CreateTestDb()\r\n// world := SetupTestWorld()\r\n// AddNetworkInputSystem(world)\r\n// AddNetworkOutputSystem(world)\r\n// 0. Setup.\r": "if item == nil {\r\n\tslot.ItemID = nil\r\n\tslot.Item = nil\r\n\treturn nil\r\n}\r\nitemId := item.GetDbID()\r\nif itemId == 0 {\r\n\treturn errors.New(\"item Db ID is 0 when setting inventory slot\")\r\n}\r\nslot.ItemID = &itemId\r\nslot.Item = item\r\nreturn nil\r\n\n",
    "// 0. Setup.\r": "CreateTestDb()\r\nworld := SetupTestWorld()\r\nAddNetworkInputSystem(world)\r\nAddNetworkOutputSystem(world)\r",
    "\t// 1. Several players already exist.\r": "networkID := uint32(5)\r\nplayerConns := []*DummyConnection{}\r\nfor i := uint32(0); i < networkID; i++ {\r\n\tplayerConn := NewDummyConnectionWithUserID(i, i)\r\n\tplayerConns = append(playerConns, playerConn)\r\n\tplayerName := \"Player\" + strconv.Itoa(int(i))\r\n\tentities.NewPlayerEntity(playerConn, playerName)\r\n}\r",
    "\t// 2. Some time passes.\r": "world.Update(float32(time.Second))\r",
    "\t// 3. A new player entity is created.\r": "conn := NewDummyConnectionWithUserID(networkID, networkID)\r\nplayer, _ := entities.NewPlayerEntity(conn, \"TestCharacter\")\r\nworld.Update(float32(time.Second))\r",
    "\t// 4. The player equips some items.\r": "netEquipSlots := EquipPlayerWithItems(player)\r",
    "\t// netInvSlots := FillPlayerInventoryWithItems(player) // TODO: Check if this works\r\n// 5. The player leaves the game.\r": "entities.PlayerContainer.RemovePlayer(conn.GetNetworkId())\r",
    "\t// 6. The player logs back into the game again\r": "entities.PlayerContainer.AddPlayer(conn)\r",
    "\t// 7. A PlayerSpawn message should have been sent to all players.\r\n// Indicating character_name, position and equipment.\r": "world.Update(float32(time.Second))\r\nfor i := uint32(0); i < networkID; i++ {\r\n\tlog.Printf(\"Checking player \" + strconv.Itoa(int(i)))\r\n\tplayerConn := playerConns[i]\r\n\tfor {\r\n\t\tselect {\r\n\t\tcase msg := <-playerConn.GetOutputChannel():\r",
    "\t\t\t\t// Skip all other messages.\r": "\t\t\tif msg.Id != utils.PLAYER_SPAWN {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tassert.Equal(t, utils.PLAYER_SPAWN, msg.Id)\r\n\t\t\tplayerSpawnMessage := utils.NewPlayerSpawnMessage(msg.Body)\r\n\t\t\tassert.Equal(t, playerSpawnMessage.NetworkId, networkID)\r\n\t\t\tassert.Equal(t, playerSpawnMessage.X, uint16(0))\r\n\t\t\tassert.Equal(t, playerSpawnMessage.Y, uint16(0))\r\n\t\t\tassert.Equal(t, playerSpawnMessage.CharacterName, \"TestCharacter\")\r",
    "\t\t\t\t// Test if equipment matches the equipment of the player.\r": "\t\t\tfor slotID, actualSlot := range playerSpawnMessage.Equipment {\r\n\t\t\t\texpectedSlot := netEquipSlots[slotID]\r\n\t\t\t\tassert.NotNil(t, actualSlot)\r\n\t\t\t\tassert.Equal(t, expectedSlot.SlotID, actualSlot.SlotID)\r\n\t\t\t\tassert.Equal(t, expectedSlot.ItemID, actualSlot.ItemID)\r\n\t\t\t\tassert.Equal(t, expectedSlot.TemplateID, actualSlot.TemplateID)\r\n\t\t\t}\r\n\t\t\treturn\r\n\t\tcase <-time.After(1 * time.Second):\r\n\t\t\tt.Fatal(\"Timeout waiting for message\")\r\n\t\t}\r\n\t}\r\n}\r",
    "\t// 8. A PlayerSpawnSelf message should have been sent to the player.\r": "\n"
}