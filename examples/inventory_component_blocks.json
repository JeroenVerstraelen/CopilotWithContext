{"\t// 0. Setup.\r":"\tCreateTestDb()\r\n\tworld := SetupTestWorld()\r\n\tAddNetworkInputSystem(world)\r\n\tAddNetworkOutputSystem(world)\r\n\r\n","\t// When a player is added to the game, using entities.AddPlayer(connection),\r\n\t// and he already exists in the database, then the player should be spawned.\r\n\t// Upon spawning, a PlayerSpawn and PlayerSpawnSelf message should be sent to the users.\r":"\r\n","\t// 1. Several players already exist.\r":"\tnetworkID := uint32(5)\r\n\tplayerConns := []*DummyConnection{}\r\n\tfor i := uint32(0); i < networkID; i++ {\r\n\t\tplayerConn := NewDummyConnectionWithUserID(i, i)\r\n\t\tplayerConns = append(playerConns, playerConn)\r\n\t\tplayerName := \"Player\" + strconv.Itoa(int(i))\r\n\t\tentities.NewPlayerEntity(playerConn, playerName)\r\n\t}\r\n\r\n","\t// 2. Some time passes.\r":"\tworld.Update(float32(time.Second))\r\n\r\n","\t// 3. A new player entity is created.\r":"\tconn := NewDummyConnectionWithUserID(networkID, networkID)\r\n\tplayer, _ := entities.NewPlayerEntity(conn, \"TestCharacter\")\r\n\tworld.Update(float32(time.Second))\r\n","\t// 4. The player equips some items.\r":"\tnetEquipSlots := EquipPlayerWithItems(player)\r\n","\t// netInvSlots := FillPlayerInventoryWithItems(player) // TODO: Check if this works\r\n\t// 5. The player leaves the game.\r":"\tentities.PlayerContainer.RemovePlayer(conn.GetNetworkId())\r\n","\t// 6. The player logs back into the game again\r":"\tentities.PlayerContainer.AddPlayer(conn)\r\n","\t// 7. A PlayerSpawn message should have been sent to all players.\r\n\t// Indicating character_name, position and equipment.\r":"\tworld.Update(float32(time.Second))\r\n\tfor i := uint32(0); i < networkID; i++ {\r\n\t\tlog.Printf(\"Checking player \" + strconv.Itoa(int(i)))\r\n\t\tplayerConn := playerConns[i]\r\n\t\tfor {\r\n\t\t\tselect {\r\n\t\t\tcase msg := <-playerConn.GetOutputChannel():\r\n","\t\t\t\t// Skip all other messages.\r":"\t\t\t\tif msg.Id != utils.PLAYER_SPAWN {\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t\tassert.Equal(t, utils.PLAYER_SPAWN, msg.Id)\r\n\t\t\t\tplayerSpawnMessage := utils.NewPlayerSpawnMessage(msg.Body)\r\n\t\t\t\tassert.Equal(t, playerSpawnMessage.NetworkId, networkID)\r\n\t\t\t\tassert.Equal(t, playerSpawnMessage.X, uint16(0))\r\n\t\t\t\tassert.Equal(t, playerSpawnMessage.Y, uint16(0))\r\n\t\t\t\tassert.Equal(t, playerSpawnMessage.CharacterName, \"TestCharacter\")\r\n","\t\t\t\t// Test if equipment matches the equipment of the player.\r":"\t\t\t\tfor slotID, actualSlot := range playerSpawnMessage.Equipment {\r\n\t\t\t\t\texpectedSlot := netEquipSlots[slotID]\r\n\t\t\t\t\tassert.NotNil(t, actualSlot)\r\n\t\t\t\t\tassert.Equal(t, expectedSlot.SlotID, actualSlot.SlotID)\r\n\t\t\t\t\tassert.Equal(t, expectedSlot.ItemID, actualSlot.ItemID)\r\n\t\t\t\t\tassert.Equal(t, expectedSlot.TemplateID, actualSlot.TemplateID)\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\r\n\t\t\tcase <-time.After(1 * time.Second):\r\n\t\t\t\tt.Fatal(\"Timeout waiting for message\")\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n","\t// 8. A PlayerSpawnSelf message should have been sent to the player.\r":"}\n"}